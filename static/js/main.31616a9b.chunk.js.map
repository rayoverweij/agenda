{"version":3,"sources":["calendar/EditText.tsx","calendar/DayItem.tsx","calendar/WeekDay.tsx","minical/MiniCal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EditText","type","start","placeholder","handleSubmit","handleDelete","useState","undefined","EditorState","createEmpty","createWithContent","convertFromRaw","editorState","setEditorState","submit","convertToRaw","getCurrentContent","toggleInlineStyle","style","newState","RichUtils","toggleBlockType","editor","customStyleMap","textDecoration","fontFamily","fontSize","color","backgroundColor","autoComplete","spellCheck","onChange","handleKeyCommand","command","document","activeElement","blur","keyBindingFn","event","key","hasText","getDefaultKeyBinding","ctrlKey","preventDefault","blockStyleFn","contentBlock","getType","onBlur","editingControls","Popover","id","Content","Button","variant","onClick","className","OverlayTrigger","trigger","placement","overlay","DayItem","task","index","updateTask","deleteTask","selected","setSelected","onDropdownToggle","isOpen","editTask","value","newTask","content","toggleHighlight","highlight","deleteThisTask","draggableId","toString","provided","snapshot","draggableProps","ref","innerRef","isDragging","dragHandleProps","Dropdown","onToggle","Toggle","as","Menu","Item","WeekDay","tasks","taskCounter","day","updateTasks","updateTaskCounter","updateDay","todaysDate","Date","date","todaysTasks","map","taskId","addTask","newTasks","newDay","push","findIndex","el","splice","Col","isToday","format","droppableId","droppableProps","isDraggingOver","length","MiniCal","currentDate","setCurrentDate","selectedDate","setSelectedDate","monthStart","startOfMonth","startOfFirstWeekInMonth","startOfWeek","weekStartsOn","displayedDays","i","addDays","colSpan","subMonths","addMonths","no","slice","isSameMonth","isSameDay","App","localStorage","getItem","setItem","JSON","stringify","parse","setTasks","setTaskCounter","days","setDays","newCounter","updateDays","newDays","weekStart","weekDays","currDay","hasOwnProperty","Container","fluid","getWeek","startMonth","getMonth","endMonth","lastYear","getYear","thisMonth","Row","onDragEnd","result","destination","source","finish","newTaskList","Number","newStartTaskList","newStart","newFinishTaskList","newFinish","subWeeks","addWeeks","weekDay","weekDayString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.31616a9b.chunk.js","sourcesContent":["import React, { useState, FocusEvent, KeyboardEvent } from 'react';\nimport { OverlayTrigger, Popover, Button } from 'react-bootstrap';\nimport { Editor, EditorState, RawDraftContentState, RichUtils, getDefaultKeyBinding, convertToRaw, convertFromRaw, ContentBlock } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport { TypeBold, TypeItalic, TypeUnderline, TypeStrikethrough, Code, Star, ListUl, TypeH3 } from 'react-bootstrap-icons';\n\n\ntype EditTextProps = {\n    type: \"add\" | \"edit\",\n    start?: RawDraftContentState,\n    placeholder?: string,\n    handleSubmit: (value: RawDraftContentState) => void,\n    handleDelete?: () => void\n}\n\nconst EditText = ({type, start, placeholder, handleSubmit, handleDelete}: EditTextProps) => {\n    const [editorState, setEditorState] = useState(\n        start === undefined ? () => EditorState.createEmpty() : () => EditorState.createWithContent(convertFromRaw(start)),\n    );\n\n    const submit = () => {\n        handleSubmit(convertToRaw(editorState.getCurrentContent()));\n        if(type === \"add\") setEditorState(EditorState.createEmpty());\n    }\n\n    const customKeyBindingFn = (event: KeyboardEvent) => {\n        switch(event.key) {\n            case 'Backspace':\n                if(!editorState.getCurrentContent().hasText() && handleDelete !== undefined) {\n                    return 'delete-item';\n                } else {\n                    return getDefaultKeyBinding(event);\n                }\n            case 'Enter':\n                if(!event.ctrlKey) {\n                    return getDefaultKeyBinding(event);\n                } else {\n                    event.preventDefault();\n                    return 'submit-item';\n                }\n            default:\n                return getDefaultKeyBinding(event);\n        }\n    }\n\n    const handleKeyCommand = (command: string, editorState: EditorState) => {\n        if(command === \"delete-item\") {\n            handleDelete!();\n            return 'handled';\n        }\n        \n        if(command === \"submit-item\") {\n            submit();\n            if(type === \"edit\") (document.activeElement! as HTMLDivElement).blur();\n            return 'handled';\n        }\n\n        const newState = RichUtils.handleKeyCommand(editorState, command);\n\n        if(newState) {\n            setEditorState(newState);\n            return 'handled';\n        }\n\n        return 'not-handled';\n    }\n\n    const onBlur = (event: FocusEvent) => {\n        event.preventDefault();\n        if(type === \"add\" && !editorState.getCurrentContent().hasText()) return;\n        submit();\n    }\n\n    const toggleInlineStyle = (style: string) => {\n        const newState = RichUtils.toggleInlineStyle(editorState, style);\n        setEditorState(newState);\n    }\n\n    const toggleBlockType = (type: string) => {\n        const newState = RichUtils.toggleBlockType(editorState, type);\n        setEditorState(newState);\n    }\n\n    const styleMap = {\n        'STRIKETHROUGH': {\n            textDecoration: 'line-through'\n        },\n        'CODE': {\n            fontFamily: 'monospace',\n            fontSize: '1rem',\n            color: 'var(--pink)'\n        },\n        'HIGHLIGHT': {\n            backgroundColor: 'yellow'\n        }\n    }\n\n    const customBlockStyleFn = (contentBlock: ContentBlock) => {\n        const type = contentBlock.getType();\n        \n        switch(type) {\n            case 'header-3':\n                return 'header3';\n            default:\n                return '';\n        }\n    }\n\n\n    const editor = (\n        <Editor\n            editorState={editorState}\n            customStyleMap={styleMap}\n            autoComplete=\"off\"\n            spellCheck={false}\n            placeholder={placeholder}\n            onChange={setEditorState}\n            handleKeyCommand={handleKeyCommand}\n            keyBindingFn={customKeyBindingFn}\n            blockStyleFn={customBlockStyleFn}\n            onBlur={onBlur}\n        />\n    );\n\n    const editingControls = (\n        <Popover id=\"editingControls\">\n            <Popover.Content>\n                <Button\n                    variant=\"light\"\n                    onClick={() => { toggleInlineStyle('BOLD') }}\n                >\n                    <TypeBold />\n                </Button>\n                <Button\n                    variant=\"light\"\n                    onClick={() => { toggleInlineStyle('ITALIC') }}\n                >\n                    <TypeItalic />\n                </Button>\n                <Button\n                    variant=\"light\"\n                    onClick={() => { toggleInlineStyle('UNDERLINE') }}\n                >\n                    <TypeUnderline />\n                </Button>\n                <Button\n                    variant=\"light\"\n                    onClick={ () => { toggleInlineStyle('STRIKETHROUGH') }}\n                >\n                    <TypeStrikethrough />\n                </Button>\n                <Button\n                    variant=\"light\"\n                    onClick={ () => { toggleInlineStyle('CODE') }}\n                >\n                    <Code />\n                </Button>\n                <Button\n                    variant=\"light\"\n                    onClick = { () => {toggleInlineStyle('HIGHLIGHT')} }\n                >\n                    <Star />\n                </Button>\n                <Button\n                    variant=\"light\"\n                    onClick={ () => { toggleBlockType('unordered-list-item') }}\n                >\n                    <ListUl />\n                </Button>\n                <Button\n                    variant=\"light\"\n                    onClick = { () => { toggleBlockType('header-3') }}\n                >\n                    <TypeH3 />\n                </Button>\n            </Popover.Content>\n        </Popover>\n    );\n\n\n    return (\n        <div className=\"editText\">\n            {\n                type === \"edit\"\n                ?\n                <OverlayTrigger\n                    trigger=\"focus\"\n                    placement=\"left-start\"\n                    overlay={editingControls}\n                >\n                    {editor}\n                </OverlayTrigger>\n                :\n                editor\n            }\n        </div>\n    );\n}\n\nexport default EditText;","import React, { useState } from 'react';\nimport './DayItem.scss';\nimport EditText from './EditText';\nimport { Task } from '../types/Task';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { GripHorizontal, ThreeDots, Trash2, Star } from 'react-bootstrap-icons';\nimport { RawDraftContentState } from 'draft-js';\n\n\ntype DayItemProps = {\n    task: Task,\n    index: number,\n    updateTask: (task: Task) => void,\n    deleteTask: (id: number) => void\n}\n\nconst DayItem = ({task, index, updateTask, deleteTask}: DayItemProps) => {\n    const [selected, setSelected] = useState(false);\n\n    const onDropdownToggle = (isOpen: boolean) => {\n        if(isOpen) setSelected(true);\n        else setSelected(false);\n    }\n\n    const editTask = (value: RawDraftContentState) => {\n        const newTask = {...task};\n        newTask.content = value;\n        updateTask(newTask);\n    }\n\n    const toggleHighlight = () => {\n        const newTask = {...task};\n        newTask.highlight ? newTask.highlight = false : newTask.highlight = true;\n        updateTask(newTask);\n    }\n\n    const deleteThisTask = () => {\n        deleteTask(task.id);\n    }\n\n    return (\n        <Draggable draggableId={task.id.toString()} index={index}>\n            {(provided, snapshot) => \n                <div\n                    {...provided.draggableProps}\n                    ref={provided.innerRef}\n                    className={`\n                        dragContainer\n                        ${snapshot.isDragging ? \"isDragging\" : \"\"}\n                        ${selected ? \"selected\" : \"\"}\n                        ${task.highlight ? \"highlight\" : \"\"}\n                    `}\n                >\n                    <div\n                        {...provided.dragHandleProps}\n                        className=\"dragHandle\"\n                        >\n                        <GripHorizontal />\n                    </div>\n                    <div className=\"taskContent\">\n                        <EditText\n                            type=\"edit\"\n                            start={task.content}\n                            handleSubmit={editTask}\n                            handleDelete={deleteThisTask}\n                        />\n                    </div>\n                    <div className=\"taskMenu\">\n                        <Dropdown onToggle={onDropdownToggle}>\n                            <Dropdown.Toggle as=\"div\" className=\"taskDropdownToggle\">\n                                <ThreeDots />\n                            </Dropdown.Toggle>\n\n                            <Dropdown.Menu className=\"taskDropdownMenu\">\n                                <Dropdown.Item onClick={deleteThisTask}>\n                                    <Trash2 />&nbsp;&nbsp;Delete\n                                </Dropdown.Item>\n                                <Dropdown.Item onClick={toggleHighlight}>\n                                    <Star />&nbsp;&nbsp;Highlight\n                                </Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </div>\n                </div>\n            }\n        </Draggable>\n    );\n}\n\nexport default DayItem;","import React from 'react';\nimport './WeekDay.scss';\nimport DayItem from './DayItem';\nimport EditText from './EditText';\nimport { Day } from '../types/Day';\nimport { Task, TaskSet } from '../types/Task';\nimport Col from 'react-bootstrap/Col';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { format, isToday } from 'date-fns';\nimport { RawDraftContentState } from 'draft-js';\n\n\ntype WeekDayProps = {\n    tasks: { [key: number]: Task },\n    taskCounter: number,\n    day: Day,\n    updateTasks: (newTasks: TaskSet) => void,\n    updateTaskCounter: (newCounter: number) => void,\n    updateDay: (newDay: Day) => void\n}\n\nconst WeekDay = ({tasks, taskCounter, day, updateTasks, updateTaskCounter, updateDay}: WeekDayProps) => {\n    const todaysDate = new Date(day.date);\n    const todaysTasks = day.tasks.map(taskId => tasks[taskId]);\n\n    const addTask = (value: RawDraftContentState) => {\n        const newTasks = {...tasks};\n        newTasks[taskCounter] = { id: taskCounter, content: value, highlight: false };\n        updateTasks(newTasks);\n        updateTaskCounter(taskCounter + 1);\n\n        const newDay = {...day};\n        newDay.tasks.push(taskCounter);\n        updateDay(newDay);\n    }\n\n    const updateTask = (task: Task) => {\n        const newTasks = {...tasks};\n        newTasks[task.id] = task;\n        updateTasks(newTasks);\n    }\n\n    const deleteTask = (taskId: number) => {\n        const newTasks = {...tasks};\n        delete newTasks[taskId];\n        updateTasks(newTasks);\n\n        const newDay = {...day};\n        const index = newDay.tasks.findIndex(el => el === taskId);\n        newDay.tasks.splice(index, 1);\n        updateDay(newDay);\n    }\n\n    return (\n        <Col className=\"weekDay\">\n            <div className=\"dayName\">\n                <p className={isToday(todaysDate) ? \"today\" : \"\"}>\n                    {format(todaysDate, 'iiii d')}\n                </p>\n            </div>\n            <Droppable droppableId={format(todaysDate, 'yyyy-MM-dd')}>\n                {(provided, snapshot) => \n                    <div\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        className={`dropContainer ${snapshot.isDraggingOver ? \"isDraggingOver\" : \"\"}`}\n                    >\n                        {todaysTasks.map((task, index) => {\n                            return (\n                                <DayItem\n                                    key={`task-${task.id}`}\n                                    task={task}\n                                    index={index}\n                                    updateTask={updateTask}\n                                    deleteTask={deleteTask}\n                                />\n                            );\n                        })}\n                        {provided.placeholder}\n                        {todaysTasks.length === 0 ?\n                            <div className=\"addTask\">\n                                <EditText\n                                    type=\"add\"\n                                    placeholder=\"\"\n                                    handleSubmit={addTask}\n                                />\n                            </div>\n                        :\n                            <></>\n                        }\n                    </div>\n                }\n            </Droppable>\n        </Col>\n    );\n}\n\nexport default WeekDay;","import React, { useState } from 'react';\nimport './MiniCal.scss';\nimport { Button } from 'react-bootstrap';\nimport { format, startOfMonth, startOfWeek, addDays, isToday, isSameDay, subMonths, addMonths, isSameMonth } from 'date-fns';\nimport { ArrowUpShort, ArrowDownShort } from 'react-bootstrap-icons';\n\n\ntype MiniCalProps = {\n    currentDate: Date,\n    setCurrentDate: (date: Date) => void\n}\n\nconst MiniCal = ({currentDate, setCurrentDate}: MiniCalProps) => {\n    const [selectedDate, setSelectedDate] = useState(currentDate);\n\n    const monthStart = startOfMonth(selectedDate);\n    const startOfFirstWeekInMonth = startOfWeek(monthStart, { weekStartsOn: 1 });\n\n    const displayedDays: Date[] = [];\n    for(let i = 0; i < 42; i++) {\n        displayedDays.push(addDays(startOfFirstWeekInMonth, i));\n    }\n\n    const onClick = (day: Date) => { setCurrentDate(day); }\n\n    const prevMonth = () => { setSelectedDate(subMonths(selectedDate, 1)); }\n    const nextMonth = () => { setSelectedDate(addMonths(selectedDate, 1)); }\n\n    return (\n        <table className=\"miniCal\">\n            <thead>\n                <tr>\n                    <th colSpan={5}>\n                        {format(selectedDate, 'MMMM')}\n                    </th>\n                    <th className=\"monthNav\">\n                        <Button\n                            variant=\"light\"\n                            onClick={prevMonth}\n                        >\n                            <ArrowUpShort />\n                        </Button>\n                    </th>\n                    <th className=\"monthNav\">\n                        <Button\n                            variant=\"light\"\n                            onClick={nextMonth}\n                        >\n                            <ArrowDownShort />\n                        </Button>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {[0, 1, 2, 3, 4, 5].map(no => {\n                    return (\n                        <tr key={`miniCal-row-${no}`}>\n                            {displayedDays.slice(no * 7, (no + 1) * 7).map((day, index) => {\n                                return (\n                                    <td key={`miniCal-row-${no}-day-${index}`}>\n                                        <Button\n                                            variant=\"light\"\n                                            className={`\n                                                ${isSameMonth(selectedDate, day) ? \"\" : \"notThisMonth\"}\n                                                ${isToday(day) ? \"today\" : \"\"}\n                                                ${isSameDay(currentDate, day) ? \"selected\" : \"\"}\n                                            `}\n                                            onClick={() => onClick(day) }\n                                        >\n                                            {format(day, 'd')}\n                                        </Button>\n                                    </td>\n                                );\n                            })}\n                        </tr>\n                    );\n                })}\n            </tbody>\n        </table>\n    );\n}\n\nexport default MiniCal;","import React, { useState } from 'react';\nimport './App.scss';\nimport WeekDay from './calendar/WeekDay';\nimport MiniCal from './minical/MiniCal';\nimport { TaskSet } from './types/Task';\nimport { Day, DaySet } from './types/Day';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport { ArrowLeftCircle, ArrowRightCircle, ArrowDownCircle } from 'react-bootstrap-icons';\nimport { format, getWeek, getMonth, getYear, startOfWeek, addDays, addWeeks, subWeeks } from 'date-fns';\n\n\nconst App = () => {\n    // Initialize local storage\n    if(localStorage.getItem(\"tasks\") === null) {\n        localStorage.setItem(\"tasks\", JSON.stringify({}));\n    }\n\n    if(localStorage.getItem(\"taskCounter\") === null) {\n        localStorage.setItem(\"taskCounter\", JSON.stringify(0));\n    }\n\n    if(localStorage.getItem(\"days\") === null) {\n        localStorage.setItem(\"days\", JSON.stringify({}));\n    }\n\n\n    // Initialize state\n    const [currentDate, setCurrentDate] = useState(new Date());\n    const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem(\"tasks\")!) as TaskSet);\n    const [taskCounter, setTaskCounter] = useState(JSON.parse(localStorage.getItem(\"taskCounter\")!));\n    const [days, setDays] = useState(JSON.parse(localStorage.getItem(\"days\")!) as DaySet);\n\n\n    // Update storage\n    const updateTasks = (newTasks: TaskSet) => {\n        setTasks(newTasks);\n        localStorage.setItem(\"tasks\", JSON.stringify(newTasks));\n    }\n\n    const updateTaskCounter = (newCounter: number) => {\n        setTaskCounter(newCounter);\n        localStorage.setItem(\"taskCounter\", JSON.stringify(newCounter));\n    }\n\n    const updateDays = (newDays: DaySet) => {\n        setDays(newDays);\n        localStorage.setItem(\"days\", JSON.stringify(newDays));\n    }\n\n    const updateDay = (newDay: Day) => {\n        const newDays = {...days};\n        newDays[newDay.date] = newDay;\n        updateDays(newDays);\n    }\n\n\n    // Information based on current state\n    const weekStart = startOfWeek(currentDate, { weekStartsOn: 1 });\n\n    const weekDays: Date[] = [];\n    for(let i = 0; i < 7; i++) {\n        weekDays.push(addDays(weekStart, i));\n\n        const currDay = format(weekDays[i], 'yyyy-MM-dd');\n        if(!days.hasOwnProperty(currDay)) {\n            const newDays = {...days};\n            newDays[currDay] = {date: currDay, tasks: []};\n            setDays(newDays);\n        }\n    }\n\n    const thisMonth = () => {\n        const startMonth = getMonth(weekDays[0]);\n        const endMonth = getMonth(weekDays[6]);\n\n        if(startMonth === 11 && endMonth === 0) {\n            const lastYear = getYear(weekDays[0]);\n            return `${format(weekDays[0], 'MMM')} ${lastYear} - ${format(weekDays[6], 'MMM Y')}`;\n        } else if(startMonth !== endMonth) {\n            return `${format(weekDays[0], 'MMM')} - ${format(weekDays[6], 'MMM Y')}`;\n        } else {\n            return format(weekDays[0], 'MMMM Y');\n        }\n    }\n\n\n    // Calendar navigation\n    const prevWeek = () => { setCurrentDate(subWeeks(currentDate, 1)); }\n    const nextWeek = () => { setCurrentDate(addWeeks(currentDate, 1)); }\n    const today = () => { setCurrentDate(new Date()); }\n\n\n    // Drag and drop tasks\n    const onDragEnd = (result: DropResult) => {\n        const { destination, source, draggableId } = result;\n\n        if(!destination) return;\n\n        if(destination.droppableId === source.droppableId && destination.index === source.index) {\n            return;\n        }\n\n        const start = days[source.droppableId]!;\n        const finish = days[destination.droppableId]!;\n\n        if(start === finish) {\n            const newTaskList = [...start.tasks];\n            newTaskList.splice(source.index, 1);\n            newTaskList.splice(destination.index, 0, Number(draggableId));\n\n            const newDay = {...finish, tasks: newTaskList};\n            updateDay(newDay);\n            \n        } else {\n            const newStartTaskList = [...start.tasks];\n            newStartTaskList.splice(source.index, 1);\n            const newStart = {...start, tasks: newStartTaskList};\n    \n            const newFinishTaskList = [...finish.tasks];\n            newFinishTaskList.splice(destination.index, 0, Number(draggableId));\n            const newFinish = {...finish, tasks: newFinishTaskList};\n    \n            const newDays = {...days};\n            newDays[newStart.date] = newStart;\n            newDays[newFinish.date] = newFinish;\n            \n            updateDays(newDays);\n        }\n    }\n\n\n    // Render\n    return (\n        <Container fluid>\n            <header>\n                <h1>Agenda</h1>\n                <span className=\"weekNumber\">Week {getWeek(currentDate, { weekStartsOn: 1 })}, {thisMonth()}</span>\n            </header>\n            <main>\n                <Row className=\"daysOfWeek\">\n                    <DragDropContext onDragEnd={onDragEnd}>\n                        <Col id=\"toolCol\">\n                            <div className=\"weekNav\">\n                                <ArrowLeftCircle className=\"weekChevron\" onClick={prevWeek} />\n                                <ArrowDownCircle className=\"weekChevron\" onClick={today} />\n                                <ArrowRightCircle className=\"weekChevron\" onClick={nextWeek} />\n                            </div>\n                            <div>\n                                <MiniCal\n                                    currentDate={currentDate}\n                                    setCurrentDate={setCurrentDate}\n                                />\n                            </div>\n                        </Col>\n                        {\n                            weekDays.map((weekDay, index) => {\n                                const weekDayString = format(weekDay, 'yyyy-MM-dd');\n                                const day = days[weekDayString];\n\n                                return (\n                                    <WeekDay\n                                        key={`weekDay-${index}`}\n                                        tasks={tasks}\n                                        taskCounter={taskCounter}\n                                        day={day}\n                                        updateTasks={updateTasks}\n                                        updateTaskCounter={updateTaskCounter}\n                                        updateDay={updateDay}\n                                    />\n                                )\n                            })\n                        }\n                    </DragDropContext>\n                </Row>\n            </main>\n        </Container>\n    );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './custom.scss';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}